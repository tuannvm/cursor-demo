name: TRD to GitHub Issues
on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  create-issues-from-trd:
    if: github.event.issue.pull_request != null && contains(github.event.comment.body, '/create-issues')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: refs/pull/${{ github.event.issue.number }}/head
      
    - name: Install Cursor CLI
      run: |
        curl https://cursor.com/install -fsS | bash
        echo "$HOME/.cursor/bin" >> $GITHUB_PATH


    - name: Create GitHub Issues with Cursor Agent
      env:
        CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Parse repository owner and name
        REPO_OWNER=$(echo "${{ github.repository }}" | cut -d'/' -f1)
        REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
        
        # Get TRD files that changed in this PR
        TRD_FILES=$(gh pr diff ${{ github.event.issue.number }} --name-only | grep -E '\.(md|txt)$' || echo "")
        
        if [ -z "$TRD_FILES" ]; then
          echo "No TRD files found in PR diff"
          exit 0
        fi
        
        cursor-agent --model sonnet-4 -f --output-format text -p "Read these TRD files that were modified in the PR: $TRD_FILES. Thoroughly analyze the complete technical requirements and create a comprehensive GitHub issue for EVERY major feature, component, and requirement mentioned in these TRDs. Create separate issues for different phases of implementation. Use these title formats: '[PHASE-1] Feature Analysis & Design - Feature Name' for planning/design phase, '[PHASE-2] Core Implementation - Feature Name' for development phase, '[PHASE-3] Testing & Validation - Feature Name' for testing phase. Use: gh issue create --title 'appropriate phase title' --body 'Detailed description with acceptance criteria and phase-specific tasks' --label 'trd-generated,planning' --repo $REPO_OWNER/$REPO_NAME. Output 'CREATED_ISSUE_URL: [url]' after each creation. Read files with cat, head, or similar shell commands." 2>&1 | tee cursor_output.log

    - name: Report Results
      if: always()
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Extract issue URLs from cursor output and comment on PR
        if grep -q "CREATED_ISSUE_URL:" cursor_output.log; then
          CREATED_ISSUES=$(grep "CREATED_ISSUE_URL:" cursor_output.log | sed 's/.*CREATED_ISSUE_URL: //' | tr '\n' ' ')
          gh pr comment ${{ github.event.issue.number }} --body "✅ TRD analysis complete - Created issues: $CREATED_ISSUES"
        else
          gh pr comment ${{ github.event.issue.number }} --body "❌ TRD analysis failed - Check workflow logs for details"
          exit 1
        fi
