name: TRD to GitHub Issues
on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  create-issues-from-trd:
    if: github.event.issue.pull_request != null && (contains(github.event.comment.body, '@cursor') || contains(github.event.comment.body, '/create-issues'))
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: refs/pull/${{ github.event.issue.number }}/head
      
    - name: Install Cursor CLI
      run: |
        curl https://cursor.com/install -fsS | bash
        echo "$HOME/.cursor/bin" >> $GITHUB_PATH

    - name: Configure git identity
      run: |
        git config --global user.name "cursor-bot"
        git config --global user.email "cursor-bot@users.noreply.github.com"

    - name: Setup MCP Configuration
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        mkdir -p ~/.cursor
        cat > ~/.cursor/mcp.json << 'EOF'
        {
          "mcpServers": {
            "github": {
              "url": "https://api.githubcopilot.com/mcp/",
              "headers": {
                "Authorization": "Bearer $GITHUB_TOKEN"
              }
            }
          }
        }
        EOF
        
        # Replace placeholder with actual token
        sed -i "s/\$GITHUB_TOKEN/$GITHUB_TOKEN/g" ~/.cursor/mcp.json

    - name: Generate Issues from TRD
      env:
        CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get TRD files from PR and read their contents directly from filesystem
        TRD_FILES=$(gh pr diff ${{ github.event.issue.number }} --name-only | grep -E '\.(md|txt)$')
        echo "Found TRD files: $TRD_FILES"
        
        if [[ -z "$TRD_FILES" ]]; then
          echo "❌ No TRD files found in PR"
          gh pr comment ${{ github.event.issue.number }} --body "❌ No TRD files (.md or .txt) found in this PR"
          exit 1
        fi
        
        # Read TRD file contents directly from the repository
        TRD_CONTENT=""
        for file in $TRD_FILES; do
          if [[ -f "$file" ]]; then
            echo "Reading $file..."
            TRD_CONTENT="$TRD_CONTENT\n\n=== $file ===\n$(cat "$file")"
          fi
        done
        
        # Parse repository owner and name
        REPO_OWNER=$(echo "${{ github.repository }}" | cut -d'/' -f1)
        REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
        
        # Run cursor agent with GitHub MCP server
        cursor-agent -p "
        CRITICAL: You must use GitHub MCP server functions to CREATE ACTUAL GITHUB ISSUES, not files or templates.
        
        Repository: $REPO_OWNER/$REPO_NAME
        
        TRD Content to analyze:
        $TRD_CONTENT
        
        WORKFLOW:
        1. Analyze the TRD content and determine what GitHub issues need to be created
        2. Present your planned issues (titles, types, descriptions) 
        3. Use GitHub MCP server create_issue function to create all issues in one efficient batch
        
        ISSUE CREATION GUIDELINES:
        - Create appropriate issue types based on the TRD content (planning, implementation, testing, documentation, etc.)
        - Use descriptive titles that reflect the actual requirements
        - Include detailed descriptions from the TRD context
        - Add appropriate labels: ['trd-generated'] plus type-specific labels like ['planning', 'implementation', 'testing']
        - Parameters for each create_issue call: owner='$REPO_OWNER', repo='$REPO_NAME'
        
        OUTPUT REQUIREMENT:
        After creating each issue, output: 'CREATED_ISSUE_URL: [actual_github_issue_url]'
        
        DO NOT create files, templates, or write code. ONLY use GitHub MCP server create_issue function calls.
        " 2>&1 | tee cursor_output.log
        
        # Extract issue URLs from cursor output and comment on PR
        if grep -q "CREATED_ISSUE_URL:" cursor_output.log; then
          CREATED_ISSUES=$(grep "CREATED_ISSUE_URL:" cursor_output.log | sed 's/.*CREATED_ISSUE_URL: //' | tr '\n' ' ')
          gh pr comment ${{ github.event.issue.number }} --body "✅ TRD analysis complete - Created issues: $CREATED_ISSUES"
        else
          gh pr comment ${{ github.event.issue.number }} --body "❌ TRD analysis failed - Check workflow logs for details"
          exit 1
        fi